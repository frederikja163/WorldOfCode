#shader vert
#version 330 core
layout (location = 0) in vec3 v_Pos;
layout (location = 1) in vec4 v_col;


out vec4 g_color;

void main()
{
    g_color = v_col;
    gl_Position = vec4(v_Pos, 1);
}

#shader geo
#version 330 core
layout (triangles) in;
layout (triangle_strip, max_vertices = 3) out;

in vec4[] g_color;

uniform mat4 u_view;
uniform mat4 u_projection;

out vec4 f_color;
out vec3 f_normal;
out vec3 f_pos;
out vec3 f_viewPos;

void main()
{
    f_color = g_color[0];
    f_normal = -normalize(cross(gl_in[0].gl_Position.xyz - gl_in[1].gl_Position.xyz, gl_in[1].gl_Position.xyz - gl_in[2].gl_Position.xyz));
    f_viewPos = u_view[3].xyz;

    for (int i = 0; i < 3; i++)
    {
        gl_Position = gl_in[i].gl_Position * u_view * u_projection;
        f_pos = gl_in[i].gl_Position.xyz;
        EmitVertex();
    }
    
    EndPrimitive();
}

#shader frag
#version 330 core

in vec4 f_color;
in vec3 f_normal;
in vec3 f_pos;
in vec3 f_viewPos;

out vec4 r_color;

void main()
{
    //Phong model based light
    vec3 lightDir = normalize(vec3(0.5, 1, 0.8));
    vec3 viewDir = normalize(f_viewPos - f_pos);
    
    //diffuse shading
    float diff = max(dot(f_normal, lightDir), 0.0);
    //specular shading
    vec3 reflectDir = reflect(-lightDir, f_normal);
    float spec = pow(max(dot(viewDir, reflectDir), 0.0), 32);
    //combine results
    vec3 ambient  = vec3(0.05)  * f_color.rgb;
    vec3 diffuse  = vec3(0.9)  * diff * f_color.rgb;
    vec3 specular = vec3(0.6) * spec;
    
    vec3 result = ambient + diffuse + specular;
    r_color = vec4(result, 1);
}